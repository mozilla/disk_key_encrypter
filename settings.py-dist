# Django settings for desktop_signing_webapp project.

import os

from settings_non_public import * # Either "settings_non_public" or "settings_public"
# This import brings in three settings
#   ALLOW_ADMIN : Allow users to access the administrative interface
#   SECRET_KEY : This is used to provide cryptographic signing, and should be set to a unique, unpredictable value.
#   OIDC_DESKTOP_CLAIM_GROUP : Users must be a member of this group to access the admin site

BASE_DIR = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
PROJECT_DIR = os.path.dirname(BASE_DIR)
PRIVATE_DIR = os.path.abspath(os.path.join(BASE_DIR, 'private'))
GPG_KEYRING_FILE = ''  # Path and filename of gpg public keyring
GPG_KEY_IDS = []  # List of gpg key ids
HOMEDIR = ''  # Path to homedir for GPG
DEBUG = True
TEMPLATE_DEBUG = DEBUG
# ALLOW_ADMIN = False  # This is set in either settings_non_public.py or settings_public.py

REMOTE_USER_HTTP_HEADER_NAME = 'X-Forwarded-User'
# https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpRequest.META
REMOTE_USER_META_VAR="HTTP_%s" % REMOTE_USER_HTTP_HEADER_NAME.upper().replace('-', '_')
GROUPS_HTTP_HEADER_NAME = 'X-Forwarded-Groups'
GROUPS_META_VAR="HTTP_%s" % GROUPS_HTTP_HEADER_NAME.upper().replace('-', '_')

ALLOWED_HOSTS=["*"]

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}



# https://docs.djangoproject.com/en/1.11/howto/auth-remote-user/
# Rely on the upstream authentication provided by a reverse proxy
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.RemoteUserBackend',
)

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Los_Angeles'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
#MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_ROOT = os.path.join(PRIVATE_DIR)

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
# SECRET_KEY = ''  # This is set in either settings_non_public.py or settings_public.py


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': '/data/disk_key_encrypter',
        'OPTIONS': {
             'debug': True,
             'context_processors': [
                 "django.template.context_processors.debug",
                 "django.template.context_processors.i18n",
                 "django.template.context_processors.media",
                 "django.template.context_processors.static",
                 "django.template.context_processors.request",
                 "django.template.context_processors.csrf",
                 "django.contrib.auth.context_processors.auth",
                 "django.contrib.messages.context_processors.messages",
                 "oidc.context_processor.has_admin_claim_group",
                 "oidc.context_processor.allow_admin",
             ]
         }
    },
]

MIDDLEWARE = [
    'reversion.middleware.RevisionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'middleware.wde.CustomRemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]


INTERNAL_IPS = ('127.0.0.1',)

ROOT_URLCONF = 'urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'wsgi.application'

TEMPLATE_DIRS = (
)

INSTALLED_APPS = (

    # django

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',

    #'south',
    #'debug_toolbar',


    # main app
    'apps.site',
    # my apps
    'apps.moz_users',
    'apps.moz_desktop',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

SOUTH_TESTS_MIGRATE = False

LOGIN_URL = '/login/'
DBS_OPTIONS = {
        'table': 'binary_blob',
        'base_url': '/administration/attach/',
    }
PAGINATION_LENGTH=5
HOMEDIR='/gpg'
PROG_NAME = 'DESKTOP_DISK_ENCRYPTER'
